"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[47],{75278:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>x,frontMatter:()=>i,metadata:()=>d,toc:()=>o});var n=l(86106),s=l(82036);const i={id:"fields",title:"Fields",sidebar_position:2},r=void 0,d={id:"api-reference/fields",title:"Fields",description:"uniforms provide a set of predefined components that can be used as form fields.",source:"@site/docs/api-reference/fields.mdx",sourceDirName:"api-reference",slug:"/api-reference/fields",permalink:"/docs/api-reference/fields",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"fields",title:"Fields",sidebar_position:2},sidebar:"docs",previous:{title:"Forms",permalink:"/docs/api-reference/forms"},next:{title:"Bridges",permalink:"/docs/api-reference/bridges"}},c={},o=[{value:"Fields",id:"fields",level:2},{value:"<code>AutoField</code>",id:"autofield",level:3},{value:"Props:",id:"props",level:5},{value:"Props usage:",id:"props-usage",level:5},{value:"<code>AutoFields</code>",id:"autofields",level:3},{value:"Props:",id:"props-1",level:5},{value:"Props usage:",id:"props-usage-1",level:5},{value:"<code>BoolField</code>",id:"boolfield",level:3},{value:"Props:",id:"props-2",level:5},{value:"Props usage:",id:"props-usage-2",level:5},{value:"<code>DateField</code>",id:"datefield",level:3},{value:"Props:",id:"props-3",level:5},{value:"Props usage:",id:"props-usage-3",level:5},{value:"<code>ErrorField</code>",id:"errorfield",level:3},{value:"Props:",id:"props-4",level:5},{value:"Props usage:",id:"props-usage-4",level:5},{value:"<code>ErrorsField</code>",id:"errorsfield",level:3},{value:"Props:",id:"props-5",level:5},{value:"Props usage:",id:"props-usage-5",level:5},{value:"<code>HiddenField</code>",id:"hiddenfield",level:3},{value:"Props:",id:"props-6",level:5},{value:"Props usage:",id:"props-usage-6",level:5},{value:"<code>ListAddField</code>",id:"listaddfield",level:3},{value:"Props:",id:"props-7",level:5},{value:"Props usage:",id:"props-usage-7",level:5},{value:"<code>ListDelField</code>",id:"listdelfield",level:3},{value:"Props:",id:"props-8",level:5},{value:"Props usage:",id:"props-usage-8",level:5},{value:"<code>ListField</code>",id:"listfield",level:3},{value:"Props:",id:"props-9",level:5},{value:"Props usage:",id:"props-usage-9",level:5},{value:"<code>ListItemField</code>",id:"listitemfield",level:3},{value:"Props usage:",id:"props-usage-10",level:5},{value:"<code>LongTextField</code>",id:"longtextfield",level:3},{value:"Props:",id:"props-10",level:5},{value:"Props usage:",id:"props-usage-11",level:5},{value:"<code>NestField</code>",id:"nestfield",level:3},{value:"Props:",id:"props-11",level:5},{value:"Props usage:",id:"props-usage-12",level:5},{value:"<code>NumField</code>",id:"numfield",level:3},{value:"Props:",id:"props-12",level:5},{value:"Props usage:",id:"props-usage-13",level:5},{value:"<code>RadioField</code>",id:"radiofield",level:3},{value:"Props:",id:"props-13",level:5},{value:"Props usage:",id:"props-usage-14",level:5},{value:"<code>SelectField</code>",id:"selectfield",level:3},{value:"Props:",id:"props-14",level:5},{value:"Props usage:",id:"props-usage-15",level:5},{value:"<code>SubmitField</code>",id:"submitfield",level:3},{value:"Props:",id:"props-15",level:5},{value:"Props usage:",id:"props-usage-16",level:5},{value:"<code>TextField</code>",id:"textfield",level:3},{value:"Props:",id:"props-16",level:5},{value:"Props usage:",id:"props-usage-17",level:5},{value:"Common props",id:"common-props",level:2},{value:"Props usage:",id:"props-usage-18",level:5},{value:"Props propagation",id:"props-propagation",level:2}];function a(e){const t={code:"code",em:"em",h2:"h2",h3:"h3",h5:"h5",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"uniforms provide a set of predefined components that can be used as form fields."}),"\n",(0,n.jsx)(t.p,{children:"The list below contains a guaranteed set of fields, implemented in every theme package:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Component"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"AutoField"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Automatically renders a given field."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"AutoFields"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Automatically renders given fields."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"BoolField"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Checkbox."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"DateField"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["HTML5 ",(0,n.jsx)(t.code,{children:"date"})," or ",(0,n.jsx)(t.code,{children:"datetime-local"})," input."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"ErrorField"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Error message for a given field."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"ErrorsField"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Error message with a list of validation errors."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"HiddenField"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Hidden field (with a possibility to omit in DOM)."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"ListAddField"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"An icon with action to add a list item."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"ListDelField"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"An icon with action to remove a list item."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"ListField"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"List of nested fields."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"ListItemField"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Single list item wrapper."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"LongTextField"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Textarea."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"NestField"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Block of nested fields."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"NumField"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Numeric input."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"RadioField"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Radio checkbox."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"SelectField"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Select (or set of radio checkboxes)."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"SubmitField"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Submit button."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"TextField"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Text (or any HTML5 compatible) input."})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"fields",children:"Fields"}),"\n",(0,n.jsx)(t.h3,{id:"autofield",children:(0,n.jsx)(t.code,{children:"AutoField"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"AutoField"})," is basically a field renderer - it will render a field of a type adequate to the one defined in the schema,\naccording to the ",(0,n.jsx)(t.code,{children:"AutoField"})," algorithm.\nYou can also directly pass a component to it (by a ",(0,n.jsx)(t.code,{children:"component"})," prop).\nAll additional props will be passed to the result field component."]}),"\n",(0,n.jsx)(t.h5,{id:"props",children:"Props:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Default"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"component"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Field according to the ",(0,n.jsx)(t.code,{children:"AutoField"})," algorithm"]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Component to render"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"name"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"-"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Name of the field in the schema"})]})]})]}),"\n",(0,n.jsx)(t.h5,{id:"props-usage",children:"Props usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import { AutoField } from 'uniforms-unstyled';\n\n<AutoField component={MyComponent} />;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"autofields",children:(0,n.jsx)(t.code,{children:"AutoFields"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"AutoFields"})," is basically a set of rendered ",(0,n.jsx)(t.code,{children:"AutoField"}),"s.\nBy default, the rendered fields will be ",(0,n.jsx)(t.code,{children:"AutoField"})," in a chosen theme.\nHowever, you can replace the standard ",(0,n.jsx)(t.code,{children:"AutoField"})," with ",(0,n.jsx)(t.code,{children:"AutoField.componentDetectorContext"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"element"})," property defines a wrapping component.\nE.g. you want to group your fields inside a section, just do ",(0,n.jsx)(t.code,{children:'element="section"'}),". The default one is ",(0,n.jsx)(t.code,{children:"div"}),"."]}),"\n",(0,n.jsx)(t.h5,{id:"props-1",children:"Props:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Default"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"element"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"div"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Fields wrapper"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"fields"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All schema fields"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"List of fields to render"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"omitFields"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"[]"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"List of fields to omit"})]})]})]}),"\n",(0,n.jsx)(t.h5,{id:"props-usage-1",children:"Props usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import { AutoFields } from 'uniforms-unstyled';\n\n<AutoFields\n  element=\"section\"\n  fields={['fieldA', 'fieldB']}\n  omitFields={['fieldA', 'fieldB']}\n/>;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"boolfield",children:(0,n.jsx)(t.code,{children:"BoolField"})}),"\n",(0,n.jsx)(t.p,{children:"A checkbox."}),"\n",(0,n.jsx)(t.h5,{id:"props-2",children:"Props:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Available in"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"appearance"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:'Field appearance. Set to "toggle" to appear as a Material Toggle or to "checkbox" (or leave it undefined) to use a Checkbox appearance.'}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"material, mui"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"extra"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Extra feedback text. In the antd theme, this renders additional help text below any validation messages."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"help"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Help text. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd, bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"helpClassName"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Help block className. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inline"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Checkbox inline state. In bootstrap themes, a label is rendered as a text but in inline mode, it's treated as a field label."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inputClassName"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inputRef"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"labelBefore"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Left label. In bootstrap themes, label is rendered on the right side of a checkbox. This label is rendered above the field."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"labelClassName"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Label className. A custom className for the field's label."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"labelCol"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field layout. The layout of label. You can set span and/or offset."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"showInlineError"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Field inline error. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd, bootstrap4, bootstrap5, semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"wrapClassName"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Field and surroundings wrap className. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"wrapperCol"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field layout. The layout for input controls. Same as labelCol."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]})]})]}),"\n",(0,n.jsx)(t.h5,{id:"props-usage-2",children:"Props usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import { BoolField } from 'uniforms-unstyled';\nimport { useRef } from 'react'\n\nconst inputRef = useRef();\n\n<BoolField\n  appearance=\"checkbox\" // Renders a material-ui Checkbox\n  appearance=\"toggle\" // Renders a material-ui Toggle\n  extra=\"Extra Feedback or Help\"\n  help=\"Need help?\"\n  helpClassName=\"a b c\"\n  inline\n  inputClassName=\"a b c\"\n  inputRef={inputRef}\n  labelBefore=\"Label\"\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName={[ 'a', 'b', 'c' ]} // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  showInlineError\n  wrapClassName=\"a b c\"\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"datefield",children:(0,n.jsx)(t.code,{children:"DateField"})}),"\n",(0,n.jsx)(t.h5,{id:"props-3",children:"Props:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Available in"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"extra"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Extra feedback text. In the antd theme, this renders additional help text below any validation messages."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"help"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Help text. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd, bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"helpClassName"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Help block className. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"icon"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Input icon. Semantic inputs can have an icon. By default, it's placed on the right side - to place it on the left, use ",(0,n.jsx)(t.code,{children:"iconLeft"})," prop instead."]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"iconLeft"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Semantic inputs can have an icon. With this prop, it's placed on the left side - to place it on the right, use icon prop instead."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"iconProps"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Input icon props. Semantic inputs can have an icon. These props are passed directly to the icon element."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inputClassName"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inputRef"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"labelClassName"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Label className. A custom className for the field's label."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"labelCol"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field layout. The layout of label. You can set span and/or offset."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"labelProps"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Props for the InputLabel"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"material, mui"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"max"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Maximum value. Date object."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"min"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Minimal value. Date object."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"showInlineError"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Field inline error. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd, bootstrap4, bootstrap5, semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"timeFormat"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Display time picker in ampm (12hr) format or 24hr format."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"material, mui"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"type"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Display date and time or date only picker. Format value according to its type"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All except antd"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"wrapClassName"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field and surroundings wrap className. In SemanticUI theme, this class name is used on ui input wrapper, so you can pass classes like small, huge, inverted, transparent etc."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5, semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"wrapperCol"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field layout. The layout for input controls. Same as labelCol."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]})]})]}),"\n",(0,n.jsx)(t.h5,{id:"props-usage-3",children:"Props usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import { DateField } from 'uniforms-unstyled';\nimport { useRef } from 'react'\n\nconst inputRef = useRef();\n\n<DateField\n  extra=\"Extra Feedback or Help\"\n  help=\"Need help?\"\n  helpClassName=\"a b c\"\n  icon=\"user\"\n  iconLeft=\"user\"\n  iconProps={{onClick() {}}}\n  inputClassName=\"a b c\"\n  inputRef={inputRef}\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName={[ 'a', 'b', 'c' ]} // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  labelProps={{shrink: true, disableAnimation: true}}\n  max={new Date(2100, 1, 1)}\n  min={new Date(2000, 1, 1)}\n  showInlineError\n  timeFormat=\"ampm\"\n  wrapClassName=\"a b c\"\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"errorfield",children:(0,n.jsx)(t.code,{children:"ErrorField"})}),"\n",(0,n.jsx)(t.p,{children:"Error message renderer."}),"\n",(0,n.jsx)(t.h5,{id:"props-4",children:"Props:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"children"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Custom content. By default, it will render a block with the error message (if any), but you can customize the content."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"name"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Target field. This field error should be used."})]})]})]}),"\n",(0,n.jsx)(t.h5,{id:"props-usage-4",children:"Props usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import { ErrorField } from 'uniforms-unstyled';\n\n<ErrorField children={children} name=\"field\" />;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"errorsfield",children:(0,n.jsx)(t.code,{children:"ErrorsField"})}),"\n",(0,n.jsx)(t.p,{children:"Error messages renderer."}),"\n",(0,n.jsx)(t.h5,{id:"props-5",children:"Props:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"children"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Custom content. By default, it will render a block with the error messages (if any), but you can customize the content."})]})})]}),"\n",(0,n.jsx)(t.h5,{id:"props-usage-5",children:"Props usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import { ErrorsField } from 'uniforms-unstyled';\n\n<ErrorsField children={children} />;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"hiddenfield",children:(0,n.jsx)(t.code,{children:"HiddenField"})}),"\n",(0,n.jsx)(t.h5,{id:"props-6",children:"Props:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"name"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field name. Used for identification. It should match your schema - if not, it will throw an error."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"value"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field value. This field has completely different semantics. When a value is set, then it's updating a current model instead of being passed to the field."})]})]})]}),"\n",(0,n.jsx)(t.h5,{id:"props-usage-6",children:"Props usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import { HiddenField } from 'uniforms-unstyled';\n\n<HiddenField name=\"field\" value={value} />;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"listaddfield",children:(0,n.jsx)(t.code,{children:"ListAddField"})}),"\n",(0,n.jsx)(t.h5,{id:"props-7",children:"Props:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Available in"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"addIcon"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Icon. By default, glyphicon is used."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]})})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Note:"})," This is one of ",(0,n.jsx)(t.em,{children:"internal"})," components of ",(0,n.jsx)(t.code,{children:"ListField"}),"."]}),"\n",(0,n.jsx)(t.h5,{id:"props-usage-7",children:"Props usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import { ListAddField } from 'uniforms-unstyled';\n\n<ListAddField addIcon={<MyAddIcon />} />;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"listdelfield",children:(0,n.jsx)(t.code,{children:"ListDelField"})}),"\n",(0,n.jsx)(t.h5,{id:"props-8",children:"Props:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Available in"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"removeIcon"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Icon. By default, glyphicon is used."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]})})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Note:"})," This is one of ",(0,n.jsx)(t.em,{children:"internal"})," components of ",(0,n.jsx)(t.code,{children:"ListField"}),"."]}),"\n",(0,n.jsx)(t.h5,{id:"props-usage-8",children:"Props usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import { ListDelField } from 'uniforms-unstyled';\n\n<ListDelField removeIcon={<MyRemoveIcon />} />;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"listfield",children:(0,n.jsx)(t.code,{children:"ListField"})}),"\n",(0,n.jsx)(t.h5,{id:"props-9",children:"Props:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Default"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Available in"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"addIcon"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"glyphicon"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Icon. It's passed to the ListAddField."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"initialCount"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"-"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Initial items count. At least this amount of fields will be rendered at the beginning."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"itemProps"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"-"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"ListItemField props. These props are passed to the ListItemField."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"removeIcon"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"glyphicon"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Icon. It's passed to the ListDelField."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"showInlineError"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"}}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Field inline error. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5, semantic"})]})]})]}),"\n",(0,n.jsx)(t.h5,{id:"props-usage-9",children:"Props usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import { ListField } from 'uniforms-unstyled';\n\n<ListField\n  addIcon={<MyAddIcon />}\n  initialCount={5}\n  itemProps={\n    {\n      /* ... */\n    }\n  }\n  removeIcon={<MyRemoveIcon />}\n  showInlineError\n/>;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"listitemfield",children:(0,n.jsx)(t.code,{children:"ListItemField"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Default"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Available in"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"removeIcon"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"glyphicon"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Icon. It's passed to the ListDelField."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]})})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Note:"})," This is one of ",(0,n.jsx)(t.em,{children:"internal"})," components of ",(0,n.jsx)(t.code,{children:"ListField"}),"."]}),"\n",(0,n.jsx)(t.h5,{id:"props-usage-10",children:"Props usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import { ListItemField } from 'uniforms-unstyled';\n\n<ListItemField removeIcon={<MyRemoveIcon />} />;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"longtextfield",children:(0,n.jsx)(t.code,{children:"LongTextField"})}),"\n",(0,n.jsx)(t.p,{children:"A textarea."}),"\n",(0,n.jsx)(t.h5,{id:"props-10",children:"Props:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Available in"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"extra"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Extra feedback text. In the antd theme, this renders additional help text below any validation messages."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"help"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Help text. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd, bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"helpClassName"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Help block className. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"icon"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Input icon. Semantic inputs can have an icon. By default, it's placed on the right side - to place it on the left, use ",(0,n.jsx)(t.code,{children:"iconLeft"})," prop instead."]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"iconLeft"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Semantic inputs can have an icon. With this prop, it's placed on the left side - to place it on the right, use icon prop instead."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"iconProps"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Input icon props. Semantic inputs can have an icon. These props are passed directly to the icon element."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inputClassName"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inline"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Checkbox inline state. In bootstrap themes, a label is rendered as a text but in inline mode, it's treated as a field label."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inputRef"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"labelBefore"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Left label. In bootstrap themes, label is rendered on the right side of a checkbox. This label is rendered above the field."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"labelClassName"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Label className. A custom className for the field's label."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"labelCol"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field layout. The layout of label. You can set span and/or offset."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"showInlineError"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Field inline error. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd, bootstrap4, bootstrap5, semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"wrapperCol"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field layout. The layout for input controls. Same as labelCol."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"wrapClassName"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Field and surroundings wrap className. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]})]})]}),"\n",(0,n.jsx)(t.h5,{id:"props-usage-11",children:"Props usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import { LongTextField } from 'uniforms-unstyled';\nimport { useRef } from 'react'\n\nconst inputRef = useRef();\n\n<LongTextField\n  extra=\"Extra Feedback or Help\"\n  help=\"Need help?\"\n  helpClassName=\"a b c\"\n  icon=\"user\"\n  iconLeft=\"user\"\n  iconProps={{onClick() {}}}\n  inputClassName=\"a b c\"\n  inputRef={inputRef}\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName={[ 'a', 'b', 'c' ]} // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  showInlineError\n  wrapClassName=\"a b c\"\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"nestfield",children:(0,n.jsx)(t.code,{children:"NestField"})}),"\n",(0,n.jsx)(t.h5,{id:"props-11",children:"Props:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Available in"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"fields"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Array of rendered fields. If no custom content provided, only those fields are rendered. By default, All of nested fields are rendered."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"grouped"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:'Add / remove "grouped" class from the field. In Semantic, fields can be grouped using this class. By default, this class is added to the NestField.'}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"showInlineError"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Field inline error. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd, bootstrap4, bootstrap5, semantic"})]})]})]}),"\n",(0,n.jsx)(t.h5,{id:"props-usage-12",children:"Props usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import { NestField } from 'uniforms-unstyled';\n\n<NestField fields={['fieldA', 'fieldB' /* ... */]} grouped showInlineError />;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"numfield",children:(0,n.jsx)(t.code,{children:"NumField"})}),"\n",(0,n.jsx)(t.p,{children:"A numeric input field."}),"\n",(0,n.jsx)(t.h5,{id:"props-12",children:"Props:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Available in"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"decimal"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Decimal mode. This will change value step from 1 to 0.01."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"extra"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Extra feedback text. In the antd theme, this renders additional help text below any validation messages."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"help"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Help text. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd, bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"helpClassName"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Help block className. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"icon"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Input icon. Semantic inputs can have an icon. By default, it's placed on the right side - to place it on the left, use ",(0,n.jsx)(t.code,{children:"iconLeft"})," prop instead."]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"iconLeft"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Semantic inputs can have an icon. With this prop, it's placed on the left side - to place it on the right, use icon prop instead."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"iconProps"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Input icon props. Semantic inputs can have an icon. These props are passed directly to the icon element."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inputClassName"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inline"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Checkbox inline state. In bootstrap themes, a label is rendered as a text but in inline mode, it's treated as a field label."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inputRef"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"labelBefore"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Left label. In bootstrap themes, label is rendered on the right side of a checkbox. This label is rendered above the field."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"labelClassName"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Label className. A custom className for the field's label."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"labelCol"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field layout. The layout of label. You can set span and/or offset."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"max"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Maximum value. Date object."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"min"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Minimal value. Date object."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"showInlineError"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Field inline error. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd, bootstrap4, bootstrap5, semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"step"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Input step."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"wrapperCol"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field layout. The layout for input controls. Same as labelCol."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"wrapClassName"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Field and surroundings wrap className. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]})]})]}),"\n",(0,n.jsx)(t.h5,{id:"props-usage-13",children:"Props usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import { NumField } from 'uniforms-unstyled';\nimport { useRef } from 'react'\n\nconst inputRef = useRef();\n\n<NumField\n  decimal\n  extra=\"Extra Feedback or Help\"\n  help=\"Need help?\"\n  helpClassName=\"a b c\"\n  icon=\"user\"\n  iconLeft=\"user\"\n  iconProps={{onClick() {}}}\n  inputClassName=\"a b c\"\n  inputRef={inputRef}\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName={[ 'a', 'b', 'c' ]} // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  max={100}\n  min={10}\n  showInlineError\n  step={5}\n  wrapClassName=\"a b c\"\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"radiofield",children:(0,n.jsx)(t.code,{children:"RadioField"})}),"\n",(0,n.jsx)(t.h5,{id:"props-13",children:"Props:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Available in"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inline"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Checkbox inline state. In bootstrap themes, a label is rendered as a text but in inline mode, it's treated as a field label."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"options"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Options. It can be either an object or an array (or a function, that returns it)."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"labelCol"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field layout. The layout of label. You can set span and/or offset."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"wrapperCol"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field layout. The layout for input controls. Same as labelCol."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inputClassName"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"labelClassName"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Label className. A custom className for the field's label."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"showInlineError"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Field inline error. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd, bootstrap4, bootstrap5, semantic"})]})]})]}),"\n",(0,n.jsx)(t.h5,{id:"props-usage-14",children:"Props usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import { RadioField } from 'uniforms-unstyled';\n\n<RadioField\n  inline\n  inputClassName=\"a b c\"\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName={[ 'a', 'b', 'c' ]} // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  options={[{ label: 'A', value: 'a' }, { label: 'B', value: 'b' }, /* ... */]}\n  showInlineError\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"selectfield",children:(0,n.jsx)(t.code,{children:"SelectField"})}),"\n",(0,n.jsx)(t.h5,{id:"props-14",children:"Props:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Available in"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"appearance"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:'Field appearance. Set to "toggle" to appear as a Material Toggle or to "checkbox" (or leave it undefined) to use a Checkbox appearance.'}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"material, mui"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"checkboxes"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Turn on checkbox/radio mode. It's always true in multiple (i.e. fieldType === Array) mode."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"disableItem"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Disable items (options) based on a given predicate."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"extra"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Extra feedback text. In the antd theme, this renders additional help text below any validation messages."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"help"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Help text. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd, bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"helpClassName"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Help block className. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inline"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Checkbox inline state. In bootstrap themes, a label is rendered as a text but in inline mode, it's treated as a field label."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inputClassName"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inputRef"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"labelClassName"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Label className. A custom className for the field's label."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"labelCol"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field layout. The layout of label. You can set span and/or offset."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"labelProps"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Props for the InputLabel"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"material, mui"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"options"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Options. It can be either an object or an array (or a function, that returns it)."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"showInlineError"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Field inline error. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd, bootstrap4, bootstrap5, semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"wrapperCol"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field layout. The layout for input controls. Same as labelCol."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"wrapClassName"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Field and surroundings wrap className. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"textFieldProps"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Props injected directly to ",(0,n.jsx)(t.code,{children:"TextField"})," ( valid only for non-checkbox ",(0,n.jsx)(t.code,{children:"SelectField"})," )."]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"material, mui"})]})]})]}),"\n",(0,n.jsx)(t.h5,{id:"props-usage-15",children:"Props usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import { SelectField } from 'uniforms-unstyled';\nimport { useRef } from 'react'\n\nconst inputRef = useRef();\n\n<SelectField\n  checkboxes\n  disableItem={value => value % 2}\n  extra=\"Extra Feedback or Help\"\n  help=\"Need help?\"\n  helpClassName=\"a b c\"\n  inline\n  inputClassName=\"a b c\"\n  inputRef={inputRef}\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName={[ 'a', 'b', 'c' ]} // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  labelProps={{shrink: true, disableAnimation: true}}\n  options={[{ label: 'A', value: 'a' }, { label: 'B', value: 'b' }, /* ... */]}\n  showInlineError\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"submitfield",children:(0,n.jsx)(t.code,{children:"SubmitField"})}),"\n",(0,n.jsx)(t.h5,{id:"props-15",children:"Props:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Available in"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inputClassName"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inputRef"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]})]})]}),"\n",(0,n.jsx)(t.h5,{id:"props-usage-16",children:"Props usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import { SubmitField } from 'uniforms-unstyled';\nimport { useRef } from 'react';\n\nconst inputRef = useRef();\n\n<SubmitField inputClassName=\"a b c\" inputRef={inputRef} />;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"textfield",children:(0,n.jsx)(t.code,{children:"TextField"})}),"\n",(0,n.jsx)(t.h5,{id:"props-16",children:"Props:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Available in"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"extra"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Extra feedback text. In the antd theme, this renders additional help text below any validation messages."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"help"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Help text. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd, bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"helpClassName"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Help block className. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"icon"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Input icon. Semantic inputs can have an icon. By default, it's placed on the right side - to place it on the left, use ",(0,n.jsx)(t.code,{children:"iconLeft"})," prop instead."]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"iconLeft"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Semantic inputs can have an icon. With this prop, it's placed on the left side - to place it on the right, use icon prop instead."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"iconProps"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Input icon props. Semantic inputs can have an icon. These props are passed directly to the icon element."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inputClassName"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"inputRef"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"labelClassName"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Label className. A custom className for the field's label."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"labelCol"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field layout. The layout of label. You can set span and/or offset."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"showInlineError"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Field inline error. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd, bootstrap4, bootstrap5, semantic"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"type"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Input type. HTML compatible input type like password. Default is text."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"All"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"wrapperCol"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field layout. The layout for input controls. Same as labelCol."}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"antd"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"wrapClassName"})}),(0,n.jsxs)(t.td,{style:{textAlign:"center"},children:["Field and surroundings wrap className. ",(0,n.jsx)(t.em,{children:"Some description would be great, huh?"})]}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"bootstrap4, bootstrap5"})]})]})]}),"\n",(0,n.jsx)(t.h5,{id:"props-usage-17",children:"Props usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import { TextField } from 'uniforms-unstyled';\nimport { useRef } from 'react'\n\nconst inputRef = useRef();\n\n<TextField\n  extra=\"Extra Feedback or Help\"\n  help=\"Need help?\"\n  helpClassName=\"a b c\"\n  icon=\"user\"\n  iconLeft=\"user\"\n  iconProps={{onClick() {}}}\n  inputClassName=\"a b c\"\n  inputRef={inputRef}\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName={[ 'a', 'b', 'c' ]} // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  showInlineError\n  type=\"password\"   // Input type. HTML compatible input type like password. Default is text.\n  wrapClassName=\"a b c\"\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n"})}),"\n",(0,n.jsx)(t.h2,{id:"common-props",children:"Common props"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Name"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Default"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"disabled"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"false"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field disabled state. It's passed directly to the field, but it propagates same as the label."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"label"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"true"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field label. This prop has three modes. If you pass a string, then it will be used as a label. If you pass a null, then it won't have a label, but nested fields will have default labels. If you pass a non-null falsy value, it won't have a label and nested fields won't have labels too."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"name"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"-"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field name. Used for identification. It should match your schema - if not, it will throw an error."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"placeholder"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"false"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field placeholder. If set to true, then a label will be used. Otherwise, it's handled like a label (including propagation)."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"readOnly"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"false"})}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Field read-only state. It's passed directly to the field, but it propagates same as the label."})]})]})]}),"\n",(0,n.jsx)(t.h5,{id:"props-usage-18",children:"Props usage:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:'<SomeField disabled={false} label name="field" placeholder={false} />\n'})}),"\n",(0,n.jsx)(t.h2,{id:"props-propagation",children:"Props propagation"}),"\n",(0,n.jsxs)(t.p,{children:["Few props propagate in a very special way. These are ",(0,n.jsx)(t.code,{children:"disabled"}),", ",(0,n.jsx)(t.code,{children:"label"}),", ",(0,n.jsx)(t.code,{children:"placeholder"}),", and ",(0,n.jsx)(t.code,{children:"readOnly"}),"."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Example:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:'<TextField />                    // default label | no      placeholder\n<TextField label="Text" />       // custom  label | no      placeholder\n<TextField label={false} />      // no      label | no      placeholder\n<TextField placeholder />        // default label | default placeholder\n<TextField placeholder="Text" /> // default label | custom  placeholder\n\n<NestField label={null}> // null = no label but the children have their labels\n    <TextField />\n</NestField>\n\n<NestField label={false}> // false = no label and the children have no labels\n    <TextField />\n</NestField>\n\n<ListField name="authors" disabled>          // Additions are disabled...\n    <ListItemField name="$" disabled>        // ...deletion too\n        <NestField disabled={false} name=""> // ...but editing is not.\n            <TextField name="name" />\n            <NumField  name="age" />\n        </NestField>\n    </ListItemField>\n</ListField>\n'})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Note:"})," ",(0,n.jsx)(t.code,{children:"disabled"}),", ",(0,n.jsx)(t.code,{children:"label"}),", ",(0,n.jsx)(t.code,{children:"placeholder"}),", and ",(0,n.jsx)(t.code,{children:"readOnly"})," are casted to ",(0,n.jsx)(t.code,{children:"Boolean"})," before being passed to nested fields."]})]})}function x(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},82036:(e,t,l)=>{l.d(t,{R:()=>r,x:()=>d});var n=l(7378);const s={},i=n.createContext(s);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);